
# ------------------------------------------------------------------------------
# Global variables
# max allowed evaluation (generations) of the genetic algorithm.
global.MAX_ALLOWED_EVOLUTIONS=50
# population size for the genetic algorithm.
global.POPULATION_SIZE=20
global.NUMBER_OF_PROFILES=1
global.NUMBER_OF_INITIAL_AGENTS=30
global.MAP_DIMENSION=20
global.FOOD=20
global.DAYS=2000
global.AVERAGE=1

global.LOG_FITNESS=False

# ------------------------------------------------------------------------------
# Base agent features
# about 10 months
base.BASE_DAYS = 200
base.BASE_ENERGY = 5
base.BASE_SMELL = 3
base.BASE_NUTRITION = 4
base.BASE_BITE = 5
base.BASE_FUR = 5
# 6 weeks
base.BASE_AGE_TO_BE_ADULT_FEMALE = 42
# 7 weeks
base.BASE_AGE_TO_BE_ADULT_MALE = 49
# 7 weeks
base.BASE_PREGNANCY_TIME = 30

# ------------------------------------------------------------------------------

#sample.chromosome=20;1,12043;0,552;0,396;0,511;0,399;0,923;0,133;0,69;0,431;0,644;0,125;0,318;0,874;0,623;0,613;0,005;0,579;0,817;0,292;0,338;0,146;0,518;0,578;0,241;0,211;0,228;0,797;0,182;0,159;0,541;0,094;0,299;0,955;0,539;0,74;0,235;0,997;0,432;0,899;0,69;0,754;0,377;0,117;0,119;0,681;0,245;0,772;0,518;0,001;0,771;0,167;0,154;0,929;0,611;0,263;0,633;0,689;0,564;0,554;0,493;0,729;
#sample.chromosome=-1;0,42446;0,63;0,195;0,787;0,927;0,901;0,121;0,685;0,975;0,047;0,049;0,311;0,647;0,122;0,404;0,509;0,632;0,376;0,319;0,256;0,874;0,413;0,75;0,587;0,115;0,324;0,678;0,415;0,18;0,58;0,712;0,828;0,954;0,676;0,251;0,421;0,661;0,361;0,176;0,181;0,244;0,777;0,73;0,719;0,088;0,983;0,829;0,94;0,318;0,159;0,571;0,782;0,187;0,246;0,112;0,335;0,854;0,888;0,388;0,443;0,954;

#1
#sample.chromosome=-1;0,00886;0,045;0,371;0,503;0,457;0,331;0,532;0,02;0,028;0,493;0,261;0,767;0,129;
sample.chromosome=0;0,49693;0,522;0,578;0,177;0,278;0,265;0,725;0,935;0,457;0,124;0,331;0,237;0,329;
#sample.chromosome=24;0,7888;0,631;0,578;0,315;0,278;0,938;0,161;0,816;0,744;0,078;0,899;0,942;0,913;

#-------------------------------------------------------------------------------
# Labels
# p = number of agents (dead or alive)
# pm = Number of agents that match the state
# a = number of alive agents
# am = number of alive agents that match the state

# 3 alive agents
#alive.c=true
#alive.r=^((?!@DIE)[\\s\\S])*$
#alive.w=10.0/(1+Math.abs(3-pm))

# growing population
#label.alivepopulation.r=.*
#label.alivepopulation.c=a>30 && a<90
#label.alivepopulation.w=gaussian((double)am, 60.0, 30.0)

# growing population
label.alivepopulation.r=^((?!@DIE)[\\s\\S])*$
label.alivepopulation.c=true
label.alivepopulation.w=gaussian((double)am, 60.0, 30.0)

# 1 opressed
label.opressed.r=[\\.\\s]*@DEFENDED[^@]*@DEFENDED[\\.\\s]*
label.opressed.c=am>=a*0.05 && am<=a*0.2
label.opressed.w=gaussian(a==0? 0: (double)am /(double)a, 0.15, 0.15)

# a warrior
label.warrior.r=[\\.\\s]*@NUDGE_OK[\\.\\s]*{5}
label.warrior.c=pm>=a*0.05 && pm<=a*0.2
label.warrior.w=gaussian(p==0? 0: (double)pm /(double)p, 0.15, 0.15)

# an indefense
label.indefense.r=[\\.\\s]*@NUDGED[\\.\\s]*{10}
label.indefense.c=pm>=p*0.05 && pm<=p*0.2
label.indefense.w=gaussian(p==0? 0: (double)pm /(double)p, 0.15, 0.15)

# failed warrior
label.failedwarrior.r=[\\.\\s]*@NUDGE_FAILED[\\.\\s]*{10}
label.failedwarrior.c=pm>=p*0.05 && pm<=p*0.2
label.failedwarrior.w=gaussian(p==0? 0: (double)pm /(double)p, 0.15, 0.15)


# revenge: un agente aparta a otro que lo apart\u00f3 a \u00e9l antes

